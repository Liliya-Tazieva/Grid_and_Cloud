//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.MathService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMathService")]
    public interface IMathService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
        double Add(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Sub", ReplyAction="http://tempuri.org/IMathService/SubResponse")]
        double Sub(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Sub", ReplyAction="http://tempuri.org/IMathService/SubResponse")]
        System.Threading.Tasks.Task<double> SubAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Mul", ReplyAction="http://tempuri.org/IMathService/MulResponse")]
        double Mul(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Mul", ReplyAction="http://tempuri.org/IMathService/MulResponse")]
        System.Threading.Tasks.Task<double> MulAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Div", ReplyAction="http://tempuri.org/IMathService/DivResponse")]
        double Div(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Div", ReplyAction="http://tempuri.org/IMathService/DivResponse")]
        System.Threading.Tasks.Task<double> DivAsync(double a, double b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathServiceChannel : WebApplication1.MathService.IMathService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathServiceClient : System.ServiceModel.ClientBase<WebApplication1.MathService.IMathService>, WebApplication1.MathService.IMathService {
        
        public MathServiceClient() {
        }
        
        public MathServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double a, double b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double a, double b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public double Sub(double a, double b) {
            return base.Channel.Sub(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SubAsync(double a, double b) {
            return base.Channel.SubAsync(a, b);
        }
        
        public double Mul(double a, double b) {
            return base.Channel.Mul(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MulAsync(double a, double b) {
            return base.Channel.MulAsync(a, b);
        }
        
        public double Div(double a, double b) {
            return base.Channel.Div(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivAsync(double a, double b) {
            return base.Channel.DivAsync(a, b);
        }
    }
}
